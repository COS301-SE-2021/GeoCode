/**
 * Swagger GeoCode
 * This is the swagger documentation and API for the GeoCode project implemented by Peak Performers for the client [5DT](https://5dt.com/).
 *
 * OpenAPI spec version: 1.5.5
 * Contact: peakperformers@geocodeapp.tech
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { CreateEventRequest } from '../model/createEventRequest';
import { CreateEventResponse } from '../model/createEventResponse';
import { CreateLeaderboardRequest } from '../model/createLeaderboardRequest';
import { CreateLeaderboardResponse } from '../model/createLeaderboardResponse';
import { CreateTimeTrialRequest } from '../model/createTimeTrialRequest';
import { CreateTimeTrialResponse } from '../model/createTimeTrialResponse';
import { EventsNearMeRequest } from '../model/eventsNearMeRequest';
import { EventsNearMeResponse } from '../model/eventsNearMeResponse';
import { GetAllEventsResponse } from '../model/getAllEventsResponse';
import { GetCurrentEventGeoCodeRequest } from '../model/getCurrentEventGeoCodeRequest';
import { GetCurrentEventGeoCodeResponse } from '../model/getCurrentEventGeoCodeResponse';
import { GetEventRequest } from '../model/getEventRequest';
import { GetEventResponse } from '../model/getEventResponse';
import { GetEventsByLocationRequest } from '../model/getEventsByLocationRequest';
import { GetEventsByLocationResponse } from '../model/getEventsByLocationResponse';
import { GetTimeLogRequest } from '../model/getTimeLogRequest';
import { GetTimeLogResponse } from '../model/getTimeLogResponse';
import { GetTimeTrialRequest } from '../model/getTimeTrialRequest';
import { GetTimeTrialResponse } from '../model/getTimeTrialResponse';
import { IsTimeTrialRequest } from '../model/isTimeTrialRequest';
import { IsTimeTrialResponse } from '../model/isTimeTrialResponse';
import { NextStageRequest } from '../model/nextStageRequest';
import { NextStageResponse } from '../model/nextStageResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class EventService {

    protected basePath = 'http://geocodeapp.tech:8080/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create a new Event
     * Create a new Event in the system with the specified attributes
     * @param body Request to create an Event
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createEvent(body: CreateEventRequest, observe?: 'body', reportProgress?: boolean): Observable<CreateEventResponse>;
    public createEvent(body: CreateEventRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreateEventResponse>>;
    public createEvent(body: CreateEventRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreateEventResponse>>;
    public createEvent(body: CreateEventRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createEvent.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CreateEventResponse>('post',`${this.basePath}/Event/createEvent`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new Leaderboard for an Event
     * Create a new Leaderboard for an Event
     * @param body Request to create a new Leaderboard for an Event
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createLeaderBoard(body: CreateLeaderboardRequest, observe?: 'body', reportProgress?: boolean): Observable<CreateLeaderboardResponse>;
    public createLeaderBoard(body: CreateLeaderboardRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreateLeaderboardResponse>>;
    public createLeaderBoard(body: CreateLeaderboardRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreateLeaderboardResponse>>;
    public createLeaderBoard(body: CreateLeaderboardRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createLeaderBoard.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CreateLeaderboardResponse>('post',`${this.basePath}/Event/createLeaderBoard`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new Time Trial for an Event
     * Create a new Time Trial with a specific timeframe for an Event
     * @param body Request to create a new Time Trial for an Event
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTimeTrial(body: CreateTimeTrialRequest, observe?: 'body', reportProgress?: boolean): Observable<CreateTimeTrialResponse>;
    public createTimeTrial(body: CreateTimeTrialRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreateTimeTrialResponse>>;
    public createTimeTrial(body: CreateTimeTrialRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreateTimeTrialResponse>>;
    public createTimeTrial(body: CreateTimeTrialRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createTimeTrial.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CreateTimeTrialResponse>('post',`${this.basePath}/Event/createTimeTrial`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves all the Events within a specified radius
     * Retrieves all the Events within a specified radius of a User
     * @param body Request to all the Events near a specified location
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public eventsNearMe(body: EventsNearMeRequest, observe?: 'body', reportProgress?: boolean): Observable<EventsNearMeResponse>;
    public eventsNearMe(body: EventsNearMeRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<EventsNearMeResponse>>;
    public eventsNearMe(body: EventsNearMeRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<EventsNearMeResponse>>;
    public eventsNearMe(body: EventsNearMeRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling eventsNearMe.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<EventsNearMeResponse>('post',`${this.basePath}/Event/eventsNearMe`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all the Events
     * Returns all the Events in the system
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllEvents(observe?: 'body', reportProgress?: boolean): Observable<GetAllEventsResponse>;
    public getAllEvents(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetAllEventsResponse>>;
    public getAllEvents(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetAllEventsResponse>>;
    public getAllEvents(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GetAllEventsResponse>('post',`${this.basePath}/Event/getAllEvents`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a specific stored Event that a user is involved in
     * Get a stored Event in the system with the specified id that a user is busy with
     * @param body Request to get a specified Event a user is busy with
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCurrentEvent(body: GetCurrentEventGeoCodeRequest, observe?: 'body', reportProgress?: boolean): Observable<GetCurrentEventGeoCodeResponse>;
    public getCurrentEvent(body: GetCurrentEventGeoCodeRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetCurrentEventGeoCodeResponse>>;
    public getCurrentEvent(body: GetCurrentEventGeoCodeRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetCurrentEventGeoCodeResponse>>;
    public getCurrentEvent(body: GetCurrentEventGeoCodeRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling getCurrentEvent.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<GetCurrentEventGeoCodeResponse>('post',`${this.basePath}/Event/getCurrentEvent`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a specific stored Event
     * Get a stored Event in the system with the specified id
     * @param body Request to get an Event
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEvent(body: GetEventRequest, observe?: 'body', reportProgress?: boolean): Observable<GetEventResponse>;
    public getEvent(body: GetEventRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetEventResponse>>;
    public getEvent(body: GetEventRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetEventResponse>>;
    public getEvent(body: GetEventRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling getEvent.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<GetEventResponse>('post',`${this.basePath}/Event/getEvent`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get an Event by its location
     * Get an Event by its location from the given co-ordinates
     * @param body Request to get an Event by its location
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEventsByLocation(body: GetEventsByLocationRequest, observe?: 'body', reportProgress?: boolean): Observable<GetEventsByLocationResponse>;
    public getEventsByLocation(body: GetEventsByLocationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetEventsByLocationResponse>>;
    public getEventsByLocation(body: GetEventsByLocationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetEventsByLocationResponse>>;
    public getEventsByLocation(body: GetEventsByLocationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling getEventsByLocation.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<GetEventsByLocationResponse>('post',`${this.basePath}/Event/getEventsByLocation`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a specific stored TimeLog entry
     * Get a stored Event in the system with the specified id
     * @param body Request to get a TimeLog entry
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTimeLog(body: GetTimeLogRequest, observe?: 'body', reportProgress?: boolean): Observable<GetTimeLogResponse>;
    public getTimeLog(body: GetTimeLogRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetTimeLogResponse>>;
    public getTimeLog(body: GetTimeLogRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetTimeLogResponse>>;
    public getTimeLog(body: GetTimeLogRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling getTimeLog.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<GetTimeLogResponse>('post',`${this.basePath}/Event/getTimeLog`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves a specific stored TimeTrial
     * Get a stored Event in the system with the specified id
     * @param body Request to get a TimeTrial
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTimeTrial(body: GetTimeTrialRequest, observe?: 'body', reportProgress?: boolean): Observable<GetTimeTrialResponse>;
    public getTimeTrial(body: GetTimeTrialRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetTimeTrialResponse>>;
    public getTimeTrial(body: GetTimeTrialRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetTimeTrialResponse>>;
    public getTimeTrial(body: GetTimeTrialRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling getTimeTrial.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<GetTimeTrialResponse>('post',`${this.basePath}/Event/getTimeTrial`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Determines if the given object is an Event or TimeTrial
     * Determines if the given object is an Event or TimeTrial
     * @param body Request to determine if an ID is for a TimeTrial
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isTimeTrial(body: IsTimeTrialRequest, observe?: 'body', reportProgress?: boolean): Observable<IsTimeTrialResponse>;
    public isTimeTrial(body: IsTimeTrialRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IsTimeTrialResponse>>;
    public isTimeTrial(body: IsTimeTrialRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IsTimeTrialResponse>>;
    public isTimeTrial(body: IsTimeTrialRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling isTimeTrial.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<IsTimeTrialResponse>('post',`${this.basePath}/Event/isTimeTrial`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves the next GeoCode to find to complete an Event
     * Retrieves the next GeoCode a User has to find to complete an Event
     * @param body Request to get a specified GeoCode for an Event a user is busy with
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public nextStage(body: NextStageRequest, observe?: 'body', reportProgress?: boolean): Observable<NextStageResponse>;
    public nextStage(body: NextStageRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NextStageResponse>>;
    public nextStage(body: NextStageRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NextStageResponse>>;
    public nextStage(body: NextStageRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling nextStage.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<NextStageResponse>('post',`${this.basePath}/Event/nextStage`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
