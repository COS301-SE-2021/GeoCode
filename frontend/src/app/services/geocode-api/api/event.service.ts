/**
 * Swagger GeoCode
 * This is the swagger documentation and API for the GeoCode project implemented by Peak Performers for the client [5DT](https://5dt.com/).
 *
 * OpenAPI spec version: 1.0.0
 * Contact: peakperformers@geocodeapp.tech
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ChangeAvailabilityRequest } from '../model/changeAvailabilityRequest';
import { ChangeAvailabilityResponse } from '../model/changeAvailabilityResponse';
import { CreateEventRequest } from '../model/createEventRequest';
import { CreateEventResponse } from '../model/createEventResponse';
import { CreateLeaderboardRequest } from '../model/createLeaderboardRequest';
import { CreateLeaderboardResponse } from '../model/createLeaderboardResponse';
import { CreatePointRequest } from '../model/createPointRequest';
import { CreatePointResponse } from '../model/createPointResponse';
import { CreateTimeTrialRequest } from '../model/createTimeTrialRequest';
import { CreateTimeTrialResponse } from '../model/createTimeTrialResponse';
import { GetAllEventsResponse } from '../model/getAllEventsResponse';
import { GetEventsByLocationRequest } from '../model/getEventsByLocationRequest';
import { GetEventsByLocationResponse } from '../model/getEventsByLocationResponse';
import { GetLeaderBoardByTimeTrialRequest } from '../model/getLeaderBoardByTimeTrialRequest';
import { GetLeaderBoardByTimeTrialResponse } from '../model/getLeaderBoardByTimeTrialResponse';
import { GetPointsByLeaderBoardRequest } from '../model/getPointsByLeaderBoardRequest';
import { GetPointsByLeaderBoardResponse } from '../model/getPointsByLeaderBoardResponse';
import { GetPointsByUserRequest } from '../model/getPointsByUserRequest';
import { GetPointsByUserResponse } from '../model/getPointsByUserResponse';
import { GetPointsResponse } from '../model/getPointsResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class EventService {

    protected basePath = 'http://geocodeapp.tech:8080/api';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Changes an Event&#x27;s availability
     * Changes the specified Event&#x27;s availability to the given availability
     * @param body Request to update the availability of an Event
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public changeAvailability(body: ChangeAvailabilityRequest, observe?: 'body', reportProgress?: boolean): Observable<ChangeAvailabilityResponse>;
    public changeAvailability(body: ChangeAvailabilityRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ChangeAvailabilityResponse>>;
    public changeAvailability(body: ChangeAvailabilityRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ChangeAvailabilityResponse>>;
    public changeAvailability(body: ChangeAvailabilityRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling changeAvailability.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ChangeAvailabilityResponse>('post',`${this.basePath}/Event/changeAvailability`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new Event
     * Create a new Event in the system with the specified attributes
     * @param body Request to create an Event
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createEvent(body: CreateEventRequest, observe?: 'body', reportProgress?: boolean): Observable<CreateEventResponse>;
    public createEvent(body: CreateEventRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreateEventResponse>>;
    public createEvent(body: CreateEventRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreateEventResponse>>;
    public createEvent(body: CreateEventRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createEvent.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CreateEventResponse>('post',`${this.basePath}/Event/createEvent`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new Event
     * Create a new Event in the system with the specified attributes
     * @param body Request to create an Event
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createLeaderBoard(body: CreateLeaderboardRequest, observe?: 'body', reportProgress?: boolean): Observable<CreateLeaderboardResponse>;
    public createLeaderBoard(body: CreateLeaderboardRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreateLeaderboardResponse>>;
    public createLeaderBoard(body: CreateLeaderboardRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreateLeaderboardResponse>>;
    public createLeaderBoard(body: CreateLeaderboardRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createLeaderBoard.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CreateLeaderboardResponse>('post',`${this.basePath}/Event/createLeaderBoard`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new Event
     * Create a new Event in the system with the specified attributes
     * @param body Request to create an Event
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createPoint(body: CreatePointRequest, observe?: 'body', reportProgress?: boolean): Observable<CreatePointResponse>;
    public createPoint(body: CreatePointRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreatePointResponse>>;
    public createPoint(body: CreatePointRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreatePointResponse>>;
    public createPoint(body: CreatePointRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createPoint.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CreatePointResponse>('post',`${this.basePath}/Event/createPoint`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new Event
     * Create a new Event in the system with the specified attributes
     * @param body Request to create an Event
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTimeTrial(body: CreateTimeTrialRequest, observe?: 'body', reportProgress?: boolean): Observable<CreateTimeTrialResponse>;
    public createTimeTrial(body: CreateTimeTrialRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CreateTimeTrialResponse>>;
    public createTimeTrial(body: CreateTimeTrialRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CreateTimeTrialResponse>>;
    public createTimeTrial(body: CreateTimeTrialRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createTimeTrial.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<CreateTimeTrialResponse>('post',`${this.basePath}/Event/createTimeTrial`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns all the Events
     * Returns all the Events in the system
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllEvents(observe?: 'body', reportProgress?: boolean): Observable<GetAllEventsResponse>;
    public getAllEvents(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetAllEventsResponse>>;
    public getAllEvents(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetAllEventsResponse>>;
    public getAllEvents(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GetAllEventsResponse>('post',`${this.basePath}/Event/getAllEvents`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new Event
     * Create a new Event in the system with the specified attributes
     * @param body Request to create an Event
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEventsByLocation(body: GetEventsByLocationRequest, observe?: 'body', reportProgress?: boolean): Observable<GetEventsByLocationResponse>;
    public getEventsByLocation(body: GetEventsByLocationRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetEventsByLocationResponse>>;
    public getEventsByLocation(body: GetEventsByLocationRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetEventsByLocationResponse>>;
    public getEventsByLocation(body: GetEventsByLocationRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling getEventsByLocation.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<GetEventsByLocationResponse>('post',`${this.basePath}/Event/getEventsByLocation`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new Event
     * Create a new Event in the system with the specified attributes
     * @param body Request to create an Event
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLeaderBoardByTimeTrial(body: GetLeaderBoardByTimeTrialRequest, observe?: 'body', reportProgress?: boolean): Observable<GetLeaderBoardByTimeTrialResponse>;
    public getLeaderBoardByTimeTrial(body: GetLeaderBoardByTimeTrialRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetLeaderBoardByTimeTrialResponse>>;
    public getLeaderBoardByTimeTrial(body: GetLeaderBoardByTimeTrialRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetLeaderBoardByTimeTrialResponse>>;
    public getLeaderBoardByTimeTrial(body: GetLeaderBoardByTimeTrialRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling getLeaderBoardByTimeTrial.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<GetLeaderBoardByTimeTrialResponse>('post',`${this.basePath}/Event/getLeaderBoardByTimeTrial`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new Event
     * Create a new Event in the system with the specified attributes
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPoints(observe?: 'body', reportProgress?: boolean): Observable<GetPointsResponse>;
    public getPoints(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetPointsResponse>>;
    public getPoints(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetPointsResponse>>;
    public getPoints(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GetPointsResponse>('post',`${this.basePath}/Event/getPoints`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new Event
     * Create a new Event in the system with the specified attributes
     * @param body Request to create an Event
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPointsByLeaderBoard(body: GetPointsByLeaderBoardRequest, observe?: 'body', reportProgress?: boolean): Observable<GetPointsByLeaderBoardResponse>;
    public getPointsByLeaderBoard(body: GetPointsByLeaderBoardRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetPointsByLeaderBoardResponse>>;
    public getPointsByLeaderBoard(body: GetPointsByLeaderBoardRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetPointsByLeaderBoardResponse>>;
    public getPointsByLeaderBoard(body: GetPointsByLeaderBoardRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling getPointsByLeaderBoard.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<GetPointsByLeaderBoardResponse>('post',`${this.basePath}/Event/getPointsByLeaderBoard`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new Event
     * Create a new Event in the system with the specified attributes
     * @param body Request to create an Event
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPointsByUser(body: GetPointsByUserRequest, observe?: 'body', reportProgress?: boolean): Observable<GetPointsByUserResponse>;
    public getPointsByUser(body: GetPointsByUserRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetPointsByUserResponse>>;
    public getPointsByUser(body: GetPointsByUserRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetPointsByUserResponse>>;
    public getPointsByUser(body: GetPointsByUserRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling getPointsByUser.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json',
            'application/xml'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<GetPointsByUserResponse>('post',`${this.basePath}/Event/getPointsByUser`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
