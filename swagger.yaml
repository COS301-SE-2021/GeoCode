openapi: 3.0.0
info:
  description: "This is the swagger documentation and API for the GeoCode project implemented by Peak Performers for the client [5DT](https://5dt.com/)."
  version: "1.5.6"
  title: "Swagger GeoCode"
  termsOfService: "https://swagger.io/terms/"
  contact:
    email: "peakperformers@geocodeapp.tech"
  license:
    name: "Apache 2.0"
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: "http://geocodeapp.tech:8080/api"
tags:
  - name: "User"
    description: "Everything about the users of the platform"
  - name: "GeoCode"
    description: "Everything about QR Codes known as GeoCodes"
  - name: "Collectable"
    description: "Everything about the collectables that users can trade"
  - name: "Leaderboard"
    description: "Everything about the different scores and rankings of users"
  - name: "Notifications"
    description: "Everything about how users are notified"
paths:
  /User/getCurrentCollectable:
    post:
      tags:
        - "User"
      summary: "Get the Collectable the User is currently holding"
      description: "Get the user's current Collectable"
      operationId: "getCurrentCollectable"
      requestBody:
        required: true
        description: "Request to get the user's current Collectable"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCurrentCollectableRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/GetCurrentCollectableRequest'
      responses:
        '200':
          description: "Create GeoCode Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCurrentCollectableResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetCurrentCollectableResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /User/getUserTrackable:
    post:
      tags:
        - "User"
      summary: "Gets the user's trackable"
      description: "Get the given user's trackable"
      operationId: "getUserTrackable"
      requestBody:
        required: true
        description: "Request to get the user's trackable"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserTrackableRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/GetUserTrackableRequest'
      responses:
        '200':
          description: "The user's trackable was successfully returned"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserTrackableResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetUserTrackableResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /User/updateLocation:
    post:
      tags:
        - "User"
      summary: "Update the location of the user's trackable"
      description: "Update the location of the user's trackable when they place it"
      operationId: "updateLocation"
      requestBody:
        required: true
        description: "Request to update the location of the user's trackable"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLocationRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/UpdateLocationRequest'
      responses:
        '200':
          description: "The user's trackable had it's location successfully updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateLocationResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UpdateLocationResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /User/getFoundCollectableTypes:
    post:
      tags:
        - "User"
      summary: "Gets the Collectable Types that the user has ever found"
      description: "Get a user's found Collectable Types"
      operationId: "getFoundCollectableTypes"
      requestBody:
        required: true
        description: "Request to get the IDs of the user's found Collectable Types"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetFoundCollectableTypesRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/GetFoundCollectableTypesRequest'
      responses:
        '200':
          description: "Successfully returned the user's found collectables"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFoundCollectableTypesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetFoundCollectableTypesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /User/getFoundGeoCodes:
    post:
      tags:
        - "User"
      summary: "Gets the GeoCodes that the user has ever found"
      description: "Gets the user's found GeoCodes"
      operationId: "getFoundGeoCodes"
      requestBody:
        required: true
        description: "Request to get the user's found GeoCodes"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetFoundGeoCodesRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/GetFoundGeoCodesRequest'
      responses:
        '200':
          description: "Successfully returned all owned GeoCodes for the user"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFoundGeoCodesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetFoundGeoCodesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /User/getOwnedGeoCodes:
    post:
      tags:
        - "User"
      summary: "Gets the user's owned GeoCodes"
      description: "Get's the user's owned GeoCodes"
      operationId: "getOwnedGeoCodes"
      requestBody:
        required: true
        description: "Request to get the user's owned GeoCodes"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOwnedGeoCodesRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/GetOwnedGeoCodesRequest'
      responses:
        '200':
          description: "Successfully returned all owned GeoCodes for the user"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOwnedGeoCodesResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetOwnedGeoCodesResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /User/getUserById:
    post:
      tags:
        - "User"
      summary: "Get a User by their ID"
      description: "Get a User"
      operationId: "getUserById"
      requestBody:
        required: true
        description: "Request to get a User"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserByIdRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/GetUserByIdRequest'
      responses:
        '200':
          description: "The User was found"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserByIdResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetUserByIdResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /User/getUsers:
    post:
      tags:
        - "User"
      summary: "Get all of the users in the system"
      description: "Get all of the users"
      operationId: "getUsers"
      requestBody:
        required: true
        description: "Request to get all users in the system"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUsersRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/GetUsersRequest'
      responses:
        '200':
          description: "Successfully returned all of the users"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetUsersResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /User/getMyLeaderboards:
    post:
      tags:
        - "User"
      summary: "Gets the User's Leaderboard rankings"
      description: "Gets all the points and ranking for the Leaderboards that the given User is on"
      operationId: "getMyLeaderboards"
      requestBody:
        required: true
        description: "Request to get the name, points and ranking for all of the Leaderboards that a User is on"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetMyLeaderboardsRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/GetMyLeaderboardsRequest'
      responses:
        '200':
          description: "getMyLeaderboards Response"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMyLeaderboardsResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetMyLeaderboardsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /User/registerNewUser:
    post:
      tags:
        - "User"
      summary: "Registers a new User"
      description: "Registers a new User with the given username"
      operationId: "registerNewUser"
      requestBody:
        required: true
        description: "Request to register a new User"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterNewUserRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/RegisterNewUserRequest'
      responses:
        '200':
          description: "Response for whether the User registration was successful"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterNewUserResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/RegisterNewUserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /User/swapCollectable:
    post:
      tags:
        - "User"
      summary: "Swaps the User's current Collectable for a Collectable inside a GeoCode"
      description: "Swaps the User's current Collectable for a Collectable inside a GeoCode"
      operationId: "swapCollectable"
      requestBody:
        required: true
        description: "Request to swap the User's current Collectable"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SwapCollectableRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/SwapCollectableRequest'
      responses:
        '200':
          description: "Response for containing the User's current Collectable before swapping it"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SwapCollectableResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/SwapCollectableResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /GeoCode/createGeoCode:
    post:
      tags:
        - "GeoCode"
      summary: "Creates a new GeoCode"
      description: "Create GeoCode"
      operationId: "createGeoCode"
      requestBody:
        required: true
        description: "Request to create a new GeoCode"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGeoCodeRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/CreateGeoCodeRequest"
      responses:
        '200':
          description: "Create GeoCode Response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateGeoCodeResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/CreateGeoCodeResponse"
        '404':
          description: "Return the GeoCode could not be created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateGeoCodeResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/CreateGeoCodeResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []
  /GeoCode/getAllGeoCodes:
    get:
      tags:
        - "GeoCode"
      summary: "Get all the GeoCodes on the platform"
      description: "Get all the GeoCodes that are stored on the platform"
      operationId: "getGeoCodes"
      responses:
        '200':
          description: "Returned all the GeoCodes successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGeoCodesResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetGeoCodesResponse"
        '404':
          description: "Return GeoCodes were not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGeoCodesResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetGeoCodesResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []
  /GeoCode/getGeoCode:
    post:
      tags:
        - "GeoCode"
      summary: "Get a specific GeoCode"
      description: "Get a GeoCode with a specified ID"
      operationId: "getGeoCode"
      requestBody:
        required: true
        description: "Request to get a stored GeoCode with teh specified ID"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetGeoCodeRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetGeoCodeRequest"
      responses:
        '200':
          description: "Successfully found the GeoCode with the given ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGeoCodeResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetGeoCodeResponse"
        '404':
          description: "Could not find the GeoCode with the given ID"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGeoCodeResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetGeoCodeResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []
  /GeoCode/getCollectables:
    post:
      tags:
        - "GeoCode"
      summary: "Get all Collectables for a certain GeoCode"
      description: "Get a GeoCode's Collectables"
      operationId: "getGeoCodeCollectables"
      requestBody:
        required: true
        description: "Request to get a GeoCode's Collectables"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCollectablesRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetCollectablesRequest"
      responses:
        '200':
          description: "Returned the GeoCode's Collectables successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectablesResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCollectablesResponse"
        '404':
          description: "Return the Collectables for a GeoCode was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectablesResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCollectablesResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []
  /GeoCode/getGeoCodesByDifficulty:
    post:
      tags:
        - "GeoCode"
      summary: "Get all all the stored GeoCodes by the specified difficulty"
      description: "Get all GeoCodes by difficulty"
      operationId: "getGeoCodesByDifficulty"
      requestBody:
        required: true
        description: "Request to get all the GeoCodes by the specified difficulty"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetGeoCodesByDifficultyRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetGeoCodesByDifficultyRequest"
      responses:
        '200':
          description: "Returned all the GeoCode's with the specified difficulty"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGeoCodesByDifficultyResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetGeoCodesByDifficultyResponse"
        '404':
          description: "Return the new Event was not successfully created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGeoCodesByDifficultyResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetGeoCodesByDifficultyResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []
  /GeoCode/getGeoCodesByDifficultyList:
    post:
      tags:
        - "GeoCode"
      summary: "Get all all the stored GeoCodes by the specified difficulties"
      description: "Get all GeoCodes by difficulty"
      operationId: "getGeoCodesByDifficultyList"
      requestBody:
        required: true
        description: "Request to get all the GeoCodes by the specified difficulties"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetGeoCodesByDifficultyListRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetGeoCodesByDifficultyListRequest"
      responses:
        '200':
          description: "Returned all the GeoCode's with the specified difficulties"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGeoCodesByDifficultyListResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetGeoCodesByDifficultyListResponse"
        '404':
          description: "Could not return GeoCode's with the specified difficulties"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGeoCodesByDifficultyListResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetGeoCodesByDifficultyListResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        -   bearerAuth: [ ]
  /GeoCode/getHints:
    post:
      tags:
        - "GeoCode"
      summary: "Get the hints for the specified GeoCode"
      description: "Get the hints for the specified GeoCode to help locate it"
      operationId: "getHints"
      requestBody:
        required: true
        description: "Request to get the hints from the specified GeoCode"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetHintsRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetHintsRequest"
      responses:
        '200':
          description: "Returned the hints for the GeoCode successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetHintsResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetHintsResponse"
        '404':
          description: "Return the hints for the GeoCode was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetHintsResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetHintsResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []
  /GeoCode/getGeoCodeByQRCode:
    post:
      tags:
        - "GeoCode"
      summary: "Get the GeoCode associated with the given QR Code"
      description: "Get the GeoCode associated with the given QR Code"
      operationId: "getGeoCodeByQRCode"
      requestBody:
        required: true
        description: "Request to get a GeoCode associated with the given QR Code"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetGeoCodeByQRCodeRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetGeoCodeByQRCodeRequest"
      responses:
        '200':
          description: "Returned the associated GeoCode successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGeoCodeByQRCodeResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetGeoCodeByQRCodeResponse"
        '404':
          description: "Return the GeoCode was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGeoCodeByQRCodeResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetGeoCodeByQRCodeResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []
  /GeoCode/getCollectablesInGeoCodeByQRCode:
    post:
      tags:
        - "GeoCode"
      summary: "Get the GeoCode's collectables associated with the given QR Code"
      description: "Get the GeoCode's collectables associated with the given QR Code"
      operationId: "getCollectablesInGeoCodeByQRCode"
      requestBody:
        required: true
        description: "Request to get a GeoCode's collectables associated with the given QR Code"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCollectablesInGeoCodeByQRCodeRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetCollectablesInGeoCodeByQRCodeRequest"
      responses:
        '200':
          description: "Returned the associated GeoCode successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectablesInGeoCodeByQRCodeResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCollectablesInGeoCodeByQRCodeResponse"
        '404':
          description: "Return the GeoCode's collectables was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectablesInGeoCodeByQRCodeResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCollectablesInGeoCodeByQRCodeResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        -   bearerAuth: [ ]
  /GeoCode/getGeoCodeByLocation:
    post:
      tags:
        - "GeoCode"
      summary: "Get the GeoCode at or near the given location"
      description: "Get the GeoCode at or near the given location"
      operationId: "getGeoCodeByLocation"
      requestBody:
        required: true
        description: "Request to get a GeoCode at or near the given location"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetGeoCodeByLocationRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetGeoCodeByLocationRequest"
      responses:
        '200':
          description: "Return the GeoCodec at or near the given location"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGeoCodeByLocationResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetGeoCodeByLocationResponse"
        '404':
          description: "Return the GeoCode was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetGeoCodeByLocationResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetGeoCodeByLocationResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []
  /GeoCode/getCollectablesInGeoCodesByLocation:
    post:
      tags:
        - "GeoCode"
      summary: "Get the GeoCode's collectables at or near the given location"
      description: "Get the GeoCode's collectables at or near the given location"
      operationId: "getCollectablesInGeoCodesByLocation"
      requestBody:
        required: true
        description: "Request to get a GeoCode's collectables at or near the given location"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCollectablesInGeoCodesByLocationRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetCollectablesInGeoCodesByLocationRequest"
      responses:
        '200':
          description: "Return the GeoCodec at or near the given location"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectablesInGeoCodesByLocationResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCollectablesInGeoCodesByLocationResponse"
        '404':
          description: "Return the GeoCode's collectables was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectablesInGeoCodesByLocationResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCollectablesInGeoCodesByLocationResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /GeoCode/swapCollectables:
    post:
      tags:
        - "GeoCode"
      summary: "Swap a specific GeoCode's Collectable"
      description: "Swap a specific GeoCode's Collectable"
      operationId: "swapCollectables"
      requestBody:
        required: true
        description: "Request to swap a GeoCode's Collectables"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SwapCollectablesRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/SwapCollectablesRequest"
      responses:
        '200':
          description: "Swapped the GeoCode's Collectable successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SwapCollectablesResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/SwapCollectablesResponse"
        '404':
          description: "Return the GeoCode did not swap collectables successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SwapCollectablesResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/SwapCollectablesResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []
  /GeoCode/updateAvailability:
    post:
      tags:
        - "GeoCode"
      summary: "Update the availability for a certain GeoCode"
      description: "Update the availability for a certain GeoCode"
      operationId: "updateAvailability"
      requestBody:
        required: true
        description: "Request to update a GeoCode's availability"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateAvailabilityRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/UpdateAvailabilityRequest"
      responses:
        '200':
          description: "Updated the GeoCode's availability successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateAvailabilityResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/UpdateAvailabilityResponse"
        '404':
          description: "Return the GeoCode Availability was not updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateAvailabilityResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/UpdateAvailabilityResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Collectable/createCollectableType:
    post:
      tags:
        - "Collectable"
      summary: "Creates a new Collectable Type"
      description: "Create Collectable Type"
      operationId: "createCollectableType"
      requestBody:
        required: true
        description: "Request to create a new Collectable Type"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCollectableTypeRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/CreateCollectableTypeRequest"
      responses:
        '200':
          description: "CollectableType created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollectableTypeResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/CreateCollectableTypeResponse"
        "400":
          description: "Failed to create CollectableType"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollectableTypeResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/CreateCollectableTypeResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []
  /Collectable/createCollectable:
    post:
      tags:
        - "Collectable"
      summary: "Creates a new Collectable"
      description: "Create Collectable"
      operationId: "createCollectable"
      requestBody:
        required: true
        description: "Request to create a new Collectable"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCollectableRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/CreateCollectableRequest"
      responses:
        '200':
          description: "Collectable created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollectableResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/CreateCollectableResponse"
        "400":
          description: "Failed to create Collectable"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollectableResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/CreateCollectableResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []
  /Collectable/createCollectableSet:
    post:
      tags:
        - "Collectable"
      summary: "Create a new Collectable Set"
      description: "Create Collectable Set"
      operationId: "createCollectableSet"
      requestBody:
        required: true
        description: "Request to create a new Collectable Set"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCollectableSetRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/CreateCollectableSetRequest"
      responses:
        '200':
          description: "Successfully created CollectableSet"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollectableSetResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/CreateCollectableSetResponse"
        "400":
          description: "Failed to create CollectableSet"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateCollectableSetResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/CreateCollectableSetResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Collectable/getCollectables:
    get:
      tags:
        - "Collectable"
      summary: "Get all of the Collectables"
      description: "Returns all Collectables"
      operationId: "getCollectables"
      responses:
        '200':
          description: "Successfully returned Collectables"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectablesResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCollectablesResponse"
        '404':
          description: "No Collectables found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectablesResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCollectablesResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Collectable/getCollectableTypes:
    get:
      tags:
        - "Collectable"
      summary: "Get all of the Collectable Types"
      description: "Returns all Collectable Types"
      operationId: "getCollectableTypes"
      responses:
        '200':
          description: "Successfully returned Collectable Types"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectableTypesResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCollectableTypesResponse"
        '404':
          description: "No CollectableTypes found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectableTypesResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCollectableTypesResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Collectable/getCollectableSets:
    get:
      tags:
        - "Collectable"
      summary: "Get all of the Collectable Sets"
      description: "Returns all Collectable Sets"
      operationId: "getCollectableSets"
      responses:
        '200':
          description: "Successfully returned Collectable Sets"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectableSetsResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCollectableSetsResponse"
        '404':
          description: "No CollectableSets found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectableSetsResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCollectableSetsResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Collectable/getCollectableByType:
    post:
      tags:
        - "Collectable"
      summary: "Get all of the Collectables of a certain type"
      description: "Returns all Collectables of the specified type"
      operationId: "getCollectableByType"
      requestBody:
        required: true
        description: "Request Collectables by type"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCollectableByTypeRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetCollectableByTypeRequest"
      responses:
        '200':
          description: "Successfully returned Collectables of given type"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectablesResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCollectablesResponse"
        '404':
          description: "Unable to find Collectables of the given type"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectablesResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCollectablesResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Collectable/getCollectableTypeByRarity:
    post:
      tags:
        - "Collectable"
      summary: "Get all of the Collectables of a certain rarity"
      description: "Returns all Collectable Types of the specified rarity"
      operationId: "getCollectableTypeByRarity"
      requestBody:
        required: true
        description: "Request Collectable Types by rarity"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCollectableTypeByRarityRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetCollectableTypeByRarityRequest"
      responses:
        '200':
          description: "Successfully returned Collectable Types of given rarity"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectableTypesResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCollectableTypesResponse"
        '404':
          description: "Unable to find CollectableTypes of provided rarity"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectableTypesResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCollectableTypesResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Collectable/getCollectableTypesBySet:
    post:
      tags:
        - "Collectable"
      summary: "Get all of the Collectables of a certain set"
      description: "Returns all Collectable Types of the specified set"
      operationId: "getCollectableTypeBySet"
      requestBody:
        required: true
        description: "Request Collectable Types by set"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCollectableTypesBySetRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetCollectableTypesBySetRequest"
      responses:
        '200':
          description: "Successfully returned CollectableTypes of given set"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectableTypesResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCollectableTypesResponse"
        '404':
          description: "Unable to find CollectableTypes of given set"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCollectableTypesResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCollectableTypesResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Leaderboard/getLeaderboardByID:
    post:
      tags:
        - "Leaderboard"
      summary: "Get a Leaderboard"
      description: "Get a Leaderboard by its ID"
      operationId: "getLeaderboardByID"
      requestBody:
        required: true
        description: "Request to get a Leaderboard"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetLeaderboardByIDRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/GetLeaderboardByIDRequest'
      responses:
        '200':
          description: "Successfully returned the Leaderboard"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLeaderboardByIDResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetLeaderboardByIDResponse'
        '404':
          description: "Unable to find the Leaderboard"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLeaderboardByIDResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetLeaderboardByIDResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /Leaderboard/getEventLeaderboard:
    post:
      tags:
        - "Leaderboard"
      summary: "Get an Event's Leaderboard details"
      description: "Returns the Event's Leaderboard details from a specific rank down for a specified number of users"
      operationId: "getEventLeaderboard"
      requestBody:
        required: true
        description: "Request to get a subset of the Event's Leaderboard details"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetEventLeaderboardRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/GetEventLeaderboardRequest'
      responses:
        '200':
          description: "Successfully returned the Event's Leaderboard details"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventLeaderboardResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetEventLeaderboardResponse'
        '404':
          description: "Unable to find CollectableTypes of given set"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventLeaderboardResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/GetEventLeaderboardResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /Leaderboard/getPointForUser:
    post:
      tags:
        - "Leaderboard"
      summary: "Get the User's points for a certain Leaderboard"
      description: "Get the User's points for a certain Leaderboard"
      operationId: "getPointForUser"
      requestBody:
        required: true
        description: "Request to get a subset of the Event's Leaderboard details"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPointForUserRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/GetPointForUserRequest'
      responses:
        '200':
          description: "Successfully returned the User's Point"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PointResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/PointResponse"
        '404':
          description: "Unable to find a Point for the User"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PointResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/PointResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Event/getAllTypeOfEvents:
    get:
      tags:
        - "Event"
      summary: "Returns all type of Events"
      description: "Returns all type of Events in the system"
      operationId: "getAllTypeOfEvents"
      responses:
        '200':
          description: "Successfully returned all the Event's"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllTypeOfEventsResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetAllTypeOfEventsResponse"
        '404':
          description: "Unable to find any Events"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllTypeOfEventsResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetAllTypeOfEventsResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Event/getAllEvents:
    get:
      tags:
        - "Event"
      summary: "Returns all the Events"
      description: "Returns all the Events in the system"
      operationId: "getAllEvents"
      responses:
        '200':
          description: "Successfully returned all the Event's"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllEventsResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetAllEventsResponse"
        '404':
          description: "Unable to find any Events"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllEventsResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetAllEventsResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Event/getAllTimeTrials:
    get:
      tags:
        - "Event"
      summary: "Returns all the TimeTrials"
      description: "Returns all the TimeTrials in the system"
      operationId: "getAllTimeTrials"
      responses:
        '200':
          description: "Successfully returned all the TimeTrials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllTimeTrialsResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetAllTimeTrialsResponse"
        '404':
          description: "Unable to find any TimeTrials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllTimeTrialsResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetAllTimeTrialsResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Event/createEvent:
    post:
      tags:
        - "Event"
      summary: "Create a new Event"
      description: "Create a new Event in the system with the specified attributes"
      operationId: "createEvent"
      requestBody:
        required: true
        description: "Request to create an Event"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateEventRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/CreateEventRequest"
      responses:
        '200':
          description: "Return the new Event was successfully created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateEventResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/CreateEventResponse"
        '404':
          description: "Return the new Event was not successfully created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateEventResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/CreateEventResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Event/getEvent:
    post:
      tags:
        - "Event"
      summary: "Retrieves a specific stored Event"
      description: "Get a stored Event in the system with the specified id"
      operationId: "getEvent"
      requestBody:
        required: true
        description: "Request to get an Event"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetEventRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetEventRequest"
      responses:
        '200':
          description: "Return the Event was successfully found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEventResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetEventResponse"
        '404':
          description: "Return the specified Event was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEventResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetEventResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Event/getTimeTrial:
    post:
      tags:
        - "Event"
      summary: "Retrieves a specific stored TimeTrial"
      description: "Get a stored Event in the system with the specified id"
      operationId: "getTimeTrial"
      requestBody:
        required: true
        description: "Request to get a TimeTrial"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetTimeTrialRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetTimeTrialRequest"
      responses:
        '200':
          description: "Return the TimeTrial was successfully found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTimeTrialResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetTimeTrialResponse"
        '404':
          description: "Return the specified TimeTrial was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTimeTrialResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetTimeTrialResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Event/isTimeTrial:
    post:
      tags:
        - "Event"
      summary: "Determines if the given object is an Event or TimeTrial"
      description: "Determines if the given object is an Event or TimeTrial"
      operationId: "isTimeTrial"
      requestBody:
        required: true
        description: "Request to determine if an ID is for a TimeTrial"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IsTimeTrialRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/IsTimeTrialRequest"
      responses:
        '200':
          description: "Return if TimeTrial or not successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IsTimeTrialResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/IsTimeTrialResponse"
        '404':
          description: "Return the specified ID was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IsTimeTrialResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/IsTimeTrialResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Event/getTimeLog:
    post:
      tags:
        - "Event"
      summary: "Retrieves a specific stored TimeLog entry"
      description: "Get a stored Event in the system with the specified id"
      operationId: "getTimeLog"
      requestBody:
        required: true
        description: "Request to get a TimeLog entry"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetTimeLogRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetTimeLogRequest"
      responses:
        '200':
          description: "Return the TimeLog entry was successfully found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTimeLogResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetTimeLogResponse"
        '404':
          description: "Return the specified TimeLog entry was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTimeLogResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetTimeLogResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Event/getCurrentEvent:
    post:
      tags:
        - "Event"
      summary: "Retrieves a specific stored Event that a user is involved in"
      description: "Get a stored Event in the system with the specified id that a user is busy with"
      operationId: "getCurrentEvent"
      requestBody:
        required: true
        description: "Request to get a specified Event a user is busy with"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCurrentEventRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetCurrentEventRequest"
      responses:
        '200':
          description: "Return the Event was successfully found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCurrentEventResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCurrentEventResponse"
        '404':
          description: "Return the specified Event was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCurrentEventResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCurrentEventResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Event/getCurrentEventLevel:
    post:
      tags:
        - "Event"
      summary: "Retrieves a specific stored GeoCode to complete a Level for an Event that a user is involved in"
      description: "Get a stored GeoCode to complete a Level for an Event in the system with the specified id that a user is busy with"
      operationId: "getCurrentEventLevel"
      requestBody:
        required: true
        description: "Request to get a specified GeoCode to complete a Level for an Event a user is busy with"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCurrentEventLevelRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetCurrentEventLevelRequest"
      responses:
        '200':
          description: "Return the GeoCode to complete a Level for an Event was successfully found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCurrentEventLevelResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCurrentEventLevelResponse"
        '404':
          description: "Return the specified GeoCode to complete a Level for an Event was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCurrentEventLevelResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetCurrentEventLevelResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Event/nextStage:
    post:
      tags:
        - "Event"
      summary: "Retrieves the next GeoCode to find to complete an Event"
      description: "Retrieves the next GeoCode a User has to find to complete an Event"
      operationId: "nextStage"
      requestBody:
        required: true
        description: "Request to get a specified GeoCode for an Event a user is busy with"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NextStageRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/NextStageRequest"
      responses:
        '200':
          description: "Return the GeoCode for the specified Event was successfully found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NextStageResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/NextStageResponse"
        '404':
          description: "Return the GeoCode for the specified Event was not successfully found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NextStageResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/NextStageResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Event/getEventsNearMe:
    post:
      tags:
        - "Event"
      summary: "Retrieves all the Events within a specified radius"
      description: "Retrieves all the Events within a specified radius of a User"
      operationId: "getEventsNearMe"
      requestBody:
        required: true
        description: "Request to all the Events near a specified location"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventsNearMeRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/EventsNearMeRequest"
      responses:
        '200':
          description: "Return all the Events near a specified location"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventsNearMeResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/EventsNearMeResponse"
        '404':
          description: "Return specified area's Events was not successfully found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventsNearMeResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/EventsNearMeResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Event/getByLocation:
    post:
      tags:
        - "Event"
      summary: "Get an Event by its location"
      description: "Get an Event and/or TimeTrial  by its location from the given co-ordinates"
      operationId: "getByLocation"
      requestBody:
        required: true
        description: "Request to get an Event and/or TimeTrial by its location"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetByLocationRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetByLocationRequest"
      responses:
        '200':
          description: "Return the found Event and/or TimeTrial"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetByLocationResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetByLocationResponse"
        '404':
          description: "Return the Event and/or TimeTrial was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetByLocationResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetByLocationResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Event/getEventsByLocation:
    post:
      tags:
        - "Event"
      summary: "Get an Event by its location"
      description: "Get an Event by its location from the given co-ordinates"
      operationId: "getEventsByLocation"
      requestBody:
        required: true
        description: "Request to get an Event by its location"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetEventsByLocationRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetEventsByLocationRequest"
      responses:
        '200':
          description: "Return the found Event"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEventsByLocationResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetEventsByLocationResponse"
        '404':
          description: "Return the Event was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetEventsByLocationResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetEventsByLocationResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Event/getTimeTrialByLocation:
    post:
      tags:
        - "Event"
      summary: "Get an TimeTrial by its location"
      description: "Get an TimeTrial by its location from the given co-ordinates"
      operationId: "getTimeTrialByLocation"
      requestBody:
        required: true
        description: "Request to get an Event by its location"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetTimeTrialByLocationRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetTimeTrialByLocationRequest"
      responses:
        '200':
          description: "Return the found TimeTrial"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTimeTrialByLocationResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetTimeTrialByLocationResponse"
        '404':
          description: "Return the TimeTrial was not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTimeTrialByLocationResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetTimeTrialByLocationResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Event/createTimeTrial:
    post:
      tags:
        - "Event"
      summary: "Create a new Time Trial for an Event"
      description: "Create a new Time Trial with a specific timeframe for an Event"
      operationId: "createTimeTrial"
      requestBody:
        required: true
        description: "Request to create a new Time Trial for an Event"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTimeTrialRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/CreateTimeTrialRequest"
      responses:
        '200':
          description: "Return the Time Trial for the Event was successfully created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTimeTrialResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/CreateTimeTrialResponse"
        '404':
          description: "Return the Time Trial for the Event was not successfully created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTimeTrialResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/CreateTimeTrialResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Event/createLeaderBoard:
    post:
      tags:
        - "Event"
      summary: "Create a new Leaderboard for an Event"
      description: "Create a new Leaderboard for an Event"
      operationId: "createLeaderBoard"
      requestBody:
        required: true
        description: "Request to create a new Leaderboard for an Event"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLeaderboardRequest"
          application/xml:
            schema:
              $ref: "#/components/schemas/CreateLeaderboardRequest"
      responses:
        '200':
          description: "Return the Leaderboard was successfully created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateLeaderboardResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/CreateLeaderboardResponse"
        '404':
          description: "Return the Leaderboard was not successfully created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateLeaderboardResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/CreateLeaderboardResponse"
        '401':
          $ref: "#/components/responses/UnauthorizedError"
      security:
        - bearerAuth: []

  /Leaderboard/createLeaderboard:
    post:
      tags:
        - "Leaderboard"
      summary: "Create a new Leaderboard"
      description: "Creates a new Leaderboard with the provided name"
      operationId: "createLeaderboard"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLeaderboardRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/CreateLeaderboardRequest'
      responses:
        '200':
          description: "Successfully created the Leaderboard"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateLeaderboardResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/CreateLeaderboardResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /Leaderboard/createPoint:
    post:
      tags:
        - "Leaderboard"
      summary: "Create a new point object"
      description: "Creates a new point object for a provided user and leaderboard"
      operationId: "createPoint"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePointRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/CreatePointRequest'
      responses:
        '200':
          description: "Successfully created a new point"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/PointResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /Leaderboard/deletePoint:
    post:
      tags:
        - "Leaderboard"
      summary: "Delete a point"
      description: "Deletes a point based on a provided id"
      operationId:  "deletePoint"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletePointRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/DeletePointRequest'
      responses:
        '200':
          description: "Successfully deleted a point"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePointResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/DeletePointResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []

  /Leaderboard/updatePoint:
    post:
      tags:
        - "Leaderboard"
      summary: "Updates a point"
      description: "Updates the fields of a point with values provided for the given id"
      operationId: "updatePoint"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePointRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/UpdatePointRequest'
      responses:
        '200':
          description: "Successfully Updated point"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PointResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/PointResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - bearerAuth: []


components:
  responses:
    UnauthorizedError:
      description: Invalid JWT token
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:

    GeoCode:
      type: "object"
      required:
        - id
        - difficulty
        - description
        - hints
        - qrCode
        - location
        - available
      properties:
        id:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        difficulty:
          $ref: "#/components/schemas/Difficulty"
        available:
          type: boolean
          example: "True"
        description:
          type: string
          example: "This describes a GeoCode"
        hints:
          type: array
          items:
            type: string
        collectables:
          type: array
          items:
            type: string
            format: uuid
        qrCode:
          type: string
          example: "1qwer3d4"
        location:
          $ref: "#/components/schemas/GeoPoint"
        createdBy:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        eventID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
      xml:
        name: "GeoCode"

    GeoPoint:
      type: "object"
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: float
          example: "25.7545"
        longitude:
          type: number
          format: float
          example: "28.2314"
      xml:
        name: "GeoPoint"

    Difficulty:
      type: string
      description: "The GeoCode's real world locating difficulty"
      enum:
        - "EASY"
        - "MEDIUM"
        - "HARD"
        - "INSANE"

    CreateGeoCodeRequest:
      type: "object"
      required:
        - description
        - location
        - difficulty
        - hints
        - available
      properties:
        description:
          type: string
          example: "This describes the GeoCode to be created"
        location:
          $ref: "#/components/schemas/GeoPoint"
        hints:
          type: array
          items:
            type: string
        difficulty:
          $ref: "#/components/schemas/Difficulty"
        available:
          type: boolean
          example: "This describes the GeoCode to be created"
      xml:
        name: "CreateGeoCodeRequest"

    CreateGeoCodeResponse:
      type: "object"
      required:
        - success
      properties:
        success:
          type: boolean
          example: "True"
        geoCodeID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        qrCode:
          type: string
          example: "1qwer3d4"
      xml:
        name: "CreateGeoCodeResponse"

    GetGeoCodesResponse:
      type: "object"
      required:
        - geocodes
      properties:
        geocodes:
          type: array
          items:
            $ref: "#/components/schemas/GeoCode"
      xml:
        name: "GetGeoCodesResponse"

    GetGeoCodeRequest:
      type: "object"
      required:
        - geoCodeID
      properties:
        geoCodeID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
      xml:
        name: "GetGeoCodeRequest"

    GetGeoCodeResponse:
      type: "object"
      required:
        - foundGeoCode
      properties:
        foundGeoCode:
          $ref: "#/components/schemas/GeoCode"
      xml:
        name: "GetGeoCodeResponse"

    GetGeoCodesByDifficultyRequest:
      type: "object"
      required:
        - difficulty
      properties:
        difficulty:
          $ref: "#/components/schemas/Difficulty"
      xml:
        name: "GetGeoCodesByDifficultyRequest"

    GetGeoCodesByDifficultyResponse:
      type: "object"
      properties:
        geocodes:
          type: array
          items:
            $ref: "#/components/schemas/GeoCode"
      xml:
        name: "GetGeoCodesByDifficultyResponse"

    GetGeoCodesByDifficultyListRequest:
      type: "object"
      required:
        - difficulty
      properties:
        difficulty:
          type: array
          items:
            $ref: "#/components/schemas/Difficulty"
      xml:
        name: "GetGeoCodesByDifficultyListRequest"

    GetGeoCodesByDifficultyListResponse:
      type: "object"
      properties:
        geocodes:
          type: array
          items:
            $ref: "#/components/schemas/GeoCode"
      xml:
        name: "GetGeoCodesByDifficultyListResponse"

    GetHintsRequest:
      type: "object"
      required:
        - geoCodeID
      properties:
        geoCodeID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
      xml:
        name: "GetHintsRequest"

    GetHintsResponse:
      type: "object"
      properties:
        hints:
          type: array
          items:
            type: string
      xml:
        name: "GetHintsResponse"

    GetGeoCodeByQRCodeRequest:
      type: "object"
      required:
        - qrCode
      properties:
        qrCode:
          type: string
          example: "1qwer3d4"
      xml:
        name: "GetGeoCodeByQRCodeRequest"

    GetGeoCodeByQRCodeResponse:
      type: "object"
      required:
        - id
        - available
        - description
        - location
        - difficulty
      properties:
        id:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        available:
          type: boolean
          example: "True"
        description:
          type: string
          example: "This describes the GeoCode to be created"
        location:
          $ref: "#/components/schemas/GeoPoint"
        difficulty:
          $ref: "#/components/schemas/Difficulty"
      xml:
        name: "GetGeoCodeByQRCodeResponse"

    GetCollectablesInGeoCodeByQRCodeRequest:
      type: "object"
      required:
        - qrCode
        - geoCodeID
      properties:
        qrCode:
          type: string
          example: "1qwer3d4"
        geoCodeID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
      xml:
        name: "GetCollectablesInGeoCodeByQRCodeRequest"

    GetCollectablesInGeoCodeByQRCodeResponse:
      type: "object"
      required:
        - storedCollectable
      properties:
        storedCollectable:
          type: array
          items:
            $ref: "#/components/schemas/CollectableResponse"
      xml:
        name: "GetCollectablesInGeoCodeByQRCodeResponse"

    GetGeoCodeByLocationRequest:
      type: "object"
      required:
        - location
      properties:
        location:
          $ref: "#/components/schemas/GeoPoint"
      xml:
        name: "GetGeoCodeByLocationRequest"

    GetGeoCodeByLocationResponse:
      type: "object"
      required:
        - id
        - available
        - description
        - location
        - difficulty
      properties:
        id:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        available:
          type: boolean
          example: "True"
        description:
          type: string
          example: "This describes the GeoCode to be created"
        location:
          $ref: "#/components/schemas/GeoPoint"
        difficulty:
          $ref: "#/components/schemas/Difficulty"
      xml:
        name: "GetGeoCodeByLocationResponse"

    GetCollectablesInGeoCodesByLocationRequest:
      type: "object"
      required:
        - location
      properties:
        location:
          $ref: "#/components/schemas/GeoPoint"
      xml:
        name: "GetCollectablesInGeoCodeByQRCodeRequest"

    GetCollectablesInGeoCodesByLocationResponse:
      type: "object"
      required:
        - storedCollectable
      properties:
        storedCollectable:
          type: array
          items:
            $ref: "#/components/schemas/CollectableResponse"
      xml:
        name: "GetCollectablesInGeoCodeByQRCodeResponse"

    SwapCollectablesRequest:
      type: "object"
      required:
        - targetGeoCodeID
        - targetCollectableID
      properties:
        collectable:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        geoCodeID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
      xml:
        name: "SwapCollectablesRequest"

    SwapCollectablesResponse:
      type: "object"
      required:
        - success
      properties:
        success:
          type: boolean
          example: "True"
      xml:
        name: "SwapCollectablesResponse"

    UpdateAvailabilityRequest:
      type: "object"
      required:
        - available
      properties:
        geoCodeID:
          type: string
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
          format: uuid
        available:
          type: boolean
          example: "True"
      xml:
        name: "UpdateAvailabilityRequest"

    UpdateAvailabilityResponse:
      type: "object"
      required:
        - success
      properties:
        success:
          type: boolean
      xml:
        name: "UpdateAvailabilityResponse"

    GetCollectablesRequest:
      type: "object"
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
      xml:
        name: "GetCollectablesRequest"

    GetCollectablesResponse:  #This is for GeoCode
      type: "object"
      required:
        - collectables
      properties:
        collectables:
          type: array
          items:
            $ref: "#/components/schemas/CollectableResponse"
      xml:
        name: "GetCollectablesResponse"

    CollectableType:
      type: "object"
      required:
        - id
        - name
        - image
        - rarity
        - set
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        image:
          type: string
        rarity:
          $ref: "#/components/schemas/Rarity"
        set:
          $ref: "#/components/schemas/CollectableSet"
        properties:
          type: object
          additionalProperties:
            type: string
      xml:
        name: "CollectableType"

    CollectableSet:
      type: "object"
      required:
        - id
        - name
        - description
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
      xml:
        name: "CollectableSet"

    Collectable:
      type: "object"
      required:
        - id
        - type
        - pastLocations
      properties:
        id:
          type: string
          format: uuid
        type:
          $ref: "#/components/schemas/CollectableType"
        pastLocations:
          type: array
          items:
            type: string
      xml:
        name: "Collectable"

    Rarity:
      type: string
      enum:
        - "COMMON"
        - "UNCOMMON"
        - "RARE"
        - "EPIC"
        - "LEGENDARY"

    CreateCollectableSetRequest:
      type: "object"
      required:
        - name
        - description
      properties:
        name:
          type: string
        description:
          type: string
      xml:
        name: "CreateCollectableSetRequest"
    CreateCollectableTypeRequest:
      type: "object"
      required:
        - name
        - image
        - rarity
        - setId
      properties:
        name:
          type: string
        image:
          type: string
        rarity:
          $ref: "#/components/schemas/Rarity"
        setId:
          type: string
          format: uuid
        properties:
          type: object
          additionalProperties:
            type: string
      xml:
        name: "CreateCollectableTypeRequest"

    CreateCollectableRequest:
      type: "object"
      required:
        - collectableTypeId
      properties:
        collectableTypeId:
          type: string
          format: uuid
      xml:
        name: "CreateCollectableRequest"

    GetCollectableTypesResponse:
      type: "object"
      required:
        - collectableTypes
      properties:
        collectableTypes:
          type: array
          items:
            $ref: "#/components/schemas/CollectableTypeComponent"
      xml:
        name: "GetCollectableTypeResponse"

    CollectableTypeComponent:
      type: "object"
      required:
        - name
        - rarity
        - id
        - set
      properties:
        name:
          type: string
        rarity:
          $ref: "#/components/schemas/Rarity"
        id:
          type: string
          format: uuid
        set:
          $ref: "#/components/schemas/CollectableSet"
        expiraryDate:
          type: string
          format: date-time
        area:
          type: string
        trackable:
          type: boolean
      xml:
        name: "CollectableTypeComponent"

    CreateCollectableTypeResponse:
      type: "object"
      required:
        - success
        - message
        - collectableType
      properties:
        success:
          type: boolean
        message:
          type: string
        collectableType:
          $ref: "#/components/schemas/CollectableTypeComponent"
      xml:
        name: "CreateCollectableTypeResponse"

    CreateCollectableSetResponse:
      type: "object"
      required:
        - success
        - message
        - collectableSet
      properties:
        success:
          type: boolean
        message:
          type: string
        collectableSet:
          $ref: "#/components/schemas/CollectableSet"
      xml:
        name: "CreateCollectableSetResponse"

    CollectableResponse:
      type: "object"
      required:
        - id
        - type
        - pastLocations
      properties:
        id:
          type: string
          format: uuid
        type:
          $ref: "#/components/schemas/CollectableTypeComponent"
        pastLocations:
          type: array
          items:
            type: string

      xml:
        name: "CollectableResponse"

    CreateCollectableResponse:
      type: "object"
      required:
        - success
        - message
        - collectable
      properties:
        success:
          type: boolean
        message:
          type: string
        collectable:
          $ref: "#/components/schemas/CollectableResponse"
      xml:
        name: "CreateCollectableResponse"

    GetCollectableSetsResponse:
      type: "object"
      required:
        - collectableSets
      properties:
        collectableSets:
          type: array
          items:
            $ref: "#/components/schemas/CollectableSet"
      xml:
        name: "GetCollectableSetsResponse"

    GetCollectableByTypeRequest:
      type: "object"
      required:
        - collectableTypeId
      properties:
        collectableTypeId:
          type: string
          format: uuid
      xml:
        name: "GetCollectableByTypeRequest"

    GetCollectableTypeByRarityRequest:
      type: "object"
      required:
        - rarity
      properties:
        rarity:
          $ref: "#/components/schemas/Rarity"
      xml:
        name: "GetCollectableTypeByRarity"

    GetCollectableTypesBySetRequest:
      type: "object"
      required:
        - setId
      properties:
        setId:
          type: string
          format: uuid
      xml:
        name: "GetCollectableTypeBySet"

    Point:
      type: "object"
      required:
        - id
        - amount
        - user
        - leaderboard
      properties:
        id:
          type: string
          format: uuid
        amount:
          type: integer
          minimum: 0
        user:
          $ref: "#/components/schemas/User"
        leaderBoard:
          $ref: "#/components/schemas/Leaderboard"
      xml:
        name: "Point"

    Leaderboard:
      type: "object"
      required:
        - id
        - name
        - event
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        event:
          $ref: "#/components/schemas/Event"
      xml:
        name: "Leaderboard"

    MyLeaderboardDetails:
      type: "object"
      required:
        - eventID
        - name
        - points
        - rank
      properties:
        eventID:
          type: string
          format: uuid
        name:
          type: string
          example: "Pretoria"
        points:
          type: integer
          minimum: 0
          example: 15
        rank:
          type: integer
          minimum: 1
          example: 5
      xml:
        name: "MyLeaderboardDetails"

    EventLeaderboardDetails:
      type: "object"
      required:
        - username
        - points
        - rank
      properties:
        username:
          type: string
          example: "john_smith"
        points:
          type: integer
          minimum: 0
          example: 15
        rank:
          type: integer
          minimum: 1
          example: 5
      xml:
        name: "EventLeaderboardDetails"

    User:
      type: "object"
      required:
        - id
        - username
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        trackableObject:
          $ref: '#/components/schemas/Collectable'
        points:
          type: array
          items:
            $ref: '#/components/schemas/Point'
        currentCollectable:
          $ref: '#/components/schemas/Collectable'
        foundCollectableTypes:
          type: array
          items:
            $ref: '#/components/schemas/CollectableType'
        foundGeocodes:
          type: array
          items:
            $ref: '#/components/schemas/GeoCode'
        ownedGeocodes:
          type: array
          items:
            $ref: '#/components/schemas/GeoCode'

    GetCurrentCollectableRequest:
      type: "object"
      required:
        - userID
      properties:
        userID:
          type: string
          format: uuid
      xml:
        name: "GetCurrentCollectableRequest"

    GetCurrentCollectableResponse:
      type: "object"
      required:
        - success
        - message
        - collectable
      properties:
        success:
          type: boolean
        message:
          type: string
          example: "The user's Collectable was successfully returned"
        collectable:
          $ref: '#/components/schemas/Collectable'
      xml:
        name: "GetCurrentCollectableResponse"

    GetUserTrackableRequest:
      type: "object"
      required:
        - userID
      properties:
        userID:
          type: string
          format: uuid
      xml:
        name: "GetUserTrackableRequest"

    GetUserTrackableResponse:
      type: "object"
      required:
        - success
        - message
        - trackable
      properties:
        success:
          type: boolean
        message:
          type: string
          example: "The user's Trackable was successfully returned"
        trackable:
          $ref: '#/components/schemas/Collectable'
      xml:
        name: "GetUserTrackableResponse"

    UpdateLocationRequest:
      type: "object"
      required:
        - userID
        - location
      properties:
        userID:
          type: string
          format: uuid
        location:
          $ref: '#/components/schemas/GeoPoint'
      xml:
        name: "UpdateLocationRequest"

    UpdateLocationResponse:
      type: "object"
      required:
        - success
        - message
        - trackable
      properties:
        success:
          type: boolean
        message:
          type: string
          example: "The trackable object's location was successfully updated"
        trackable:
          $ref: '#/components/schemas/Collectable'
      xml:
        name: "UpdateLocationResponse"

    GetFoundCollectableTypesRequest:
      type: "object"
      required:
        - userID
      properties:
        userID:
          type: string
          format: uuid
      xml:
        name: "GetFoundCollectablesRequest"

    GetFoundCollectableTypesResponse:
      type: "object"
      required:
        - success
        - message
        - collectableTypeIDs
      properties:
        success:
          type: boolean
        message:
          type: string
          example: "The IDs of the User's found CollectableTypes was successfully returned"
        collectableTypeIDs:
          type: array
          items:
            type: string
            format: uuid
      xml:
        name: "GetFoundCollectablesResponse"

    GetFoundGeoCodesRequest:
      type: "object"
      required:
        - userID
      properties:
        userID:
          type: string
          format: uuid
      xml:
        name: "GetFoundGeocodesRequest"

    GetFoundGeoCodesResponse:
      type: "object"
      required:
        - success
        - message
        - geocodeIDs
      properties:
        success:
          type: boolean
        message:
          type: string
          example: "The IDs of the User's found GeoCodes was successfully returned"
        geocodeIDs:
          type: array
          items:
            type: string
            format: uuid
      xml:
        name: "GetFoundGeoCodesResponse"

    GetOwnedGeoCodesRequest:
      type: "object"
      required:
        - userID
      properties:
        userID:
          type: string
          format: uuid
      xml:
        name: "GetOwnedGeocodesRequest"

    GetOwnedGeoCodesResponse:
      type: "object"
      required:
        - success
        - message
        - geocodeIDs
      properties:
        success:
          type: boolean
        message:
          type: string
          example: "The IDs of the User's owned GeoCodes was successfully returned"
        geocodeIDs:
          type: array
          items:
            type: string
            format: uuid
      xml:
        name: "GetOwnedGeocodesResponse"

    GetUserByIdRequest:
      type: "object"
      required:
        - userID
      properties:
        userID:
          type: string
          format: uuid
      xml:
        name: "GetUserByIdRequest"

    GetUserByIdResponse:
      type: "object"
      required:
        - success
        - message
        - user
      properties:
        success:
          type: boolean
        message:
          type: string
          example: "The User was found"
        user:
          $ref: '#/components/schemas/User'
      xml:
        name: "GetUserByIdResponse"

    GetUsersRequest:
      type: "object"
      required:
        - adminID
      properties:
        adminID:
          type: string
          format: uuid
      xml:
        name: "GetUsersRequest"

    GetUsersResponse:
      type: "object"
      required:
        - users
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
      xml:
        name: "GetUsersResponse"

    GetMyLeaderboardsRequest:
      type: "object"
      required:
        - userID
      properties:
        userID:
          type: string
          format: uuid
      xml:
        name: "GetMyLeaderboardsRequest"

    GetMyLeaderboardsResponse:
      type: "object"
      required:
        - success
        - message
        - leaderboards
      properties:
        success:
          type: boolean
        message:
          type: string
          example: "The details for the User's Leaderboards were successfully returned"
        leaderboards:
          type: array
          items:
            $ref: '#/components/schemas/MyLeaderboardDetails'
      xml:
        name: "GetMyLeaderboardsResponse"

    CreateLeaderboardRequest:
      type: "object"
      required:
        - name
      properties:
        name:
          type: string
          example: "Earth Day"
      xml:
        name: "CreateLeaderboardRequest"

    CreateLeaderboardResponse:
      type: "object"
      required:
        - success
        - message
        - leaderboard
      properties:
        success:
          type: boolean
        message:
          type: string
          example: "The Leaderboard was successfully created"
        leaderboard:
          $ref: '#/components/schemas/Leaderboard'
      xml:
        name: "GetMyLeaderboardsResponse"

    RegisterNewUserRequest:
      type: "object"
      required:
        - userID
        - username
      properties:
        userID:
          type: string
          format: UUID
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        username:
          type: string
      xml:
        name: "RegisterNewUserRequest"

    RegisterNewUserResponse:
      type: "object"
      required:
        - success
        - message
      properties:
        success:
          type: boolean
        message:
          type: string
          example: "New User registered"

    SwapCollectableRequest:
      type: "object"
      required:
        - targetCollectableID
        - targetGeoCodeID
      properties:
        targetCollectableID:
          type: string
          format: UUID
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        targetGeoCodeID:
          type: string
          format: UUID
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
      xml:
        name: "RegisterNewUserRequest"

    SwapCollectableResponse:
      type: "object"
      required:
        - success
        - message
        - collectable
      properties:
        success:
          type: boolean
        message:
          type: string
          example: "The User's Collectable was swapped with the Collectable in the GeoCode"
        collectable:
          $ref: '#/components/schemas/Collectable'


    GetEventLeaderboardRequest:
      type: "object"
      required:
        - leaderboardId
        - starting
        - count
      properties:
        leaderboardId:
          type: string
          format: UUID
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        starting:
          type: integer
          minimum: 1
          example: 5
        count:
          type: integer
          minimum: 1
          example: 10
      xml:
        name: "GetMyLeaderboardsResponse"

    GetEventLeaderboardResponse:
      type: "object"
      required:
        - success
        - message
        - leaderboard
      properties:
        success:
          type: boolean
        message:
          type: string
          example: "The details for the Event's Leaderboard were successfully returned"
        leaderboard:
          type: array
          items:
            $ref: "#/components/schemas/EventLeaderboardDetails"
      xml:
        name: "GetMyLeaderboardsResponse"

    GetPointForUserRequest:
      type: object
      required:
        - userID
        - leaderboardID
      properties:
        userID:
          type: string
          format: UUID
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        leaderboardID:
          type: string
          format: UUID
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
      xml:
        name: "GetPointForUserRequest"

    UpdatePointRequest:
      type: object
      required:
        - pointId
      properties:
        pointId:
          type: string
          format: UUID
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        amount:
          type: integer
          minimum: 0
          example: 6
        userId:
          type: string
          format: UUID
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        leaderboardId:
          type: string
          format: UUID
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
      xml:
        name: "UpdatePointRequest"

    DeletePointRequest:
      type: object
      required:
        - pointId
      properties:
        pointId:
          type: string
          format: UUID
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
      xml:
        name: "DeletePointRequest"

    CreatePointRequest:
      type: "object"
      required:
        - amount
        - userID
        - leaderboardID
      properties:
        amount:
          type: number
          example: 1
        userID:
          type: string
          format: UUID
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        leaderboardID:
          type: string
          format: UUID
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
      xml:
        name: "CreatePointRequest"

    PointResponse:
      type: "object"
      required:
        - success
        - message
        - point
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Successfully created a new point"
        point:
          $ref: "#/components/schemas/Point"
      xml:
        name: "PointResponse"

    DeletePointResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Successfully deleted point"
      xml:
        name: "DeletePointResponse"

    Event:
      type: "object"
      required:
        - id
        - name
        - description
        - location
        - leaderboard
      properties:
        id:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        name:
          type: string
          example: "My Event"
        description:
          type: string
          example: "There are 4 GeoCodes to find in this Event."
        location:
          $ref: "#/components/schemas/GeoPoint"
        levels:
          type: array
          items:
            $ref: "#/components/schemas/Level"
        beginDate:
          type: string
          format: date
          pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
          example: "2017-01-01"
        endDate:
          type: string
          format: date
          pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
          example: "2017-01-01"
        leaderboard:
          type: array
          items:
            $ref: "#/components/schemas/Leaderboard"
        available:
          type: boolean
          example: "True"
      xml:
        name: "Event"
    TimeTrial:
      type: "object"
      allOf:
        -   $ref: "#/components/schemas/Event"
      required:
        - timeLimit
      properties:
        timeLimit:
          type: number
          example: "60.0"
      xml:
        name: "TimeTrial"
    Level:
      type: "object"
      required:
        - id
        - target
      properties:
        id:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        target:
          $ref: "#/components/schemas/GeoCode"
        onLevel:
          type: object
          additionalProperties:
            type: string
            format: uuid
            example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
      xml:
        name: "Level"
    TimeLog:
      type: "object"
      required:
        - eventID
        - userID
        - geoCodeID
        - startTime
      properties:
        eventID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        userID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        geoCodeID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        startTime:
          type: string
          format: date-time
      xml:
        name: "TimeLog"

    OrderLevels:
      type: string
      description: "The order an Event should follow with completing Levels"
      enum:
        - "GIVEN"
        - "DIFFICULTY"
        - "DISTANCE"

    GetAllTypeOfEventsResponse:
      type: "object"
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        timeTrials:
          type: array
          items:
            $ref: "#/components/schemas/TimeTrial"
      xml:
        name: "GetAllTypeOfEventsResponse"

    GetAllEventsResponse:
      type: "object"
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"
      xml:
        name: "GetAllEventsResponse"

    GetAllTimeTrialsResponse:
      type: "object"
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/TimeTrial"
      xml:
        name: "GetAllTimeTrialsResponse"

    CreateEventRequest:
      type: "object"
      required:
        - name
        - description
        - location
        - beginDate
        - geoCodesToFind
        - orderBy
      properties:
        name:
          type: string
          example: "My Event"
        description:
          type: string
          example: "There are 4 GeoCodes to find in this Event."
        location:
          $ref: "#/components/schemas/GeoPoint"
        beginDate:
          type: string
          format: date
          pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
          example: "2017-01-01"
        endDate:
          type: string
          format: date
          pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
          example: "2017-01-01"
        geoCodesToFind:
          type: array
          items:
            type: string
            format: uuid
            example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        orderBy:
          $ref: "#/components/schemas/OrderLevels"
      xml:
        name: "CreateEventRequest"

    CreateEventResponse:
      type: "object"
      required:
        - success
      properties:
        success:
          type: boolean
          example: "True"
      xml:
        name: "CreateEventResponse"

    CreateTimeTrialRequest:
      type: "object"
      required:
        - timeLimit
        - name
        - description
        - location
        - beginDate
        - GeoCodesToFind
        - orderBy
      properties:
        timeLimit:
          type: number
          example: "10.0"
        name:
          type: string
          example: "My Event"
        description:
          type: string
          example: "There are 4 GeoCodes to find in this Event."
        location:
          $ref: "#/components/schemas/GeoPoint"
        beginDate:
          type: string
          format: date
          pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
          example: "2017-01-01"
        endDate:
          type: string
          format: date
          pattern: /([0-9]{4})-(?:[0-9]{2})-([0-9]{2})/
          example: "2017-01-01"
        GeoCodesToFind:
          type: array
          items:
            type: string
            format: uuid
            example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        orderBy:
          $ref: "#/components/schemas/OrderLevels"
      xml:
        name: "CreateTimeTrialRequest"

    CreateTimeTrialResponse:
      type: "object"
      required:
        - success
      properties:
        success:
          type: boolean
          example: "True"
      xml:
        name: "CreateTimeTrialResponse"

    GetEventRequest:
      type: "object"
      properties:
        eventID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
      xml:
        name: "GetEventRequest"

    GetEventResponse:
      type: "object"
      required:
        - found
      properties:
        found:
          type: boolean
          example: "True"
        foundEvent:
          $ref: "#/components/schemas/Event"
      xml:
        name: "GetEventResponse"

    GetTimeTrialRequest:
      type: "object"
      properties:
        eventID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
      xml:
        name: "GetEventRequest"

    GetTimeTrialResponse:
      type: "object"
      required:
        - found
      properties:
        found:
          type: boolean
          example: "True"
        foundEvent:
          $ref: "#/components/schemas/TimeTrial"
      xml:
        name: "GetEventResponse"

    IsTimeTrialRequest:
      type: "object"
      properties:
        eventID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
      xml:
        name: "GetEventRequest"

    IsTimeTrialResponse:
      type: "object"
      required:
        - found
      properties:
        found:
          type: boolean
          example: "True"
        foundEvent:
          $ref: "#/components/schemas/TimeTrial"
      xml:
        name: "GetEventResponse"

    GetTimeLogRequest:
      type: "object"
      required:
        - eventID
        - userID
        - geoCodeID
      properties:
        eventID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        userID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        geoCodeID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
      xml:
        name: "GetEventRequest"

    GetTimeLogResponse:
      type: "object"
      required:
        - found
      properties:
        found:
          type: boolean
          example: "True"
        foundTimeLog:
          $ref: "#/components/schemas/TimeLog"
      xml:
        name: "GetEventResponse"

    GetCurrentEventRequest:
      type: "object"
      required:
        - userID
      properties:
        userID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
      xml:
        name: "GetCurrentEventRequest"

    GetCurrentEventResponse:
      type: "object"
      required:
        - found
      properties:
        found:
          type: boolean
          example: "True"
        foundEvent:
          $ref: "#/components/schemas/Event"
      xml:
        name: "GetCurrentEventResponse"

    GetCurrentEventLevelRequest:
      type: "object"
      required:
        - userID
        - eventID
      properties:
        userID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        eventID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
      xml:
        name: "GetCurrentEventLevelRequest"

    GetCurrentEventLevelResponse:
      type: "object"
      required:
        - found
      properties:
        found:
          type: boolean
          example: "True"
        foundGeoCode:
          $ref: "#/components/schemas/GeoCode"
      xml:
        name: "GetCurrentEventLevelResponse"

    NextStageRequest:
      type: "object"
      required:
        - eventID
        - userID
      properties:
        eventID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
        userID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
      xml:
        name: "NextStageRequest"

    NextStageResponse:
      type: "object"
      properties:
        nextGeoCode:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"
      xml:
        name: "NextStageResponse"

    EventsNearMeRequest:
      type: "object"
      required:
        - location
        - radius
      properties:
        location:
          $ref: "#/components/schemas/GeoPoint"
        radius:
          type: number
          example: "10.0"
      xml:
        name: "EventsNearMeRequest"

    EventsNearMeResponse:
      type: "object"
      properties:
        foundEvents:
          type: array
          items:
            $ref: "#/components/schemas/Event"
      xml:
        name: "EventsNearMeResponse"

    GetByLocationRequest:
      type: "object"
      required:
        - location
      properties:
        location:
          $ref: "#/components/schemas/GeoPoint"
      xml:
        name: "GetByLocationRequest"

    GetByLocationResponse:
      type: "object"
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        timeTrials:
          type: array
          items:
            $ref: "#/components/schemas/TimeTrial"
      xml:
        name: "GetByLocationResponse"

    GetEventsByLocationRequest:
      type: "object"
      required:
        - location
      properties:
        location:
          $ref: "#/components/schemas/GeoPoint"
      xml:
        name: "GetEventsByLocationRequest"

    GetEventsByLocationResponse:
      type: "object"
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"
      xml:
        name: "GetEventsByLocationResponse"

    GetTimeTrialByLocationRequest:
      type: "object"
      required:
        - location
      properties:
        location:
          $ref: "#/components/schemas/GeoPoint"
      xml:
        name: "GetTimeTrialByLocationRequest"

    GetTimeTrialByLocationResponse:
      type: "object"
      properties:
        timeTrials:
          type: array
          items:
            $ref: "#/components/schemas/TimeTrial"
      xml:
        name: "GetTimeTrialByLocationResponse"

    GetPointsByUserRequest:
      type: "object"
      required:
        - userID
      properties:
        userID:
          type: string
          format: uuid
      xml:
        name: "GetPointsByUserRequest"

    GetPointsByUserResponse:
      type: "object"
      required:
        - points
      properties:
        points:
          type: array
          items:
            $ref: "#/components/schemas/Point"
      xml:
        name: "GetPointsByUserResponse"

    GetPointsByLeaderBoardRequest:
      type: "object"
      required:
        - leaderboardID
      properties:
        leaderboardID:
          type: string
          format: uuid
      xml:
        name: "GetPointsByLeaderBoardRequest"

    GetPointsByLeaderBoardResponse:
      type: "object"
      required:
        - points
      properties:
        points:
          type: array
          items:
            $ref: "#/components/schemas/Point"
      xml:
        name: "GetPointsByLeaderBoardResponse"

    GetPointsResponse:
      type: "object"
      required:
        - points
      properties:
        points:
          type: array
          items:
            $ref: "#/components/schemas/Point"
      xml:
        name: "GetPointsResponse"

    GetLeaderboardByIDRequest:
      type: "object"
      required:
        - leaderboardID
      properties:
        leaderboardID:
          type: string
          format: uuid
          example: "054463f2-2f7c-4864-8130-68e5aa79ee7f"

    GetLeaderboardByIDResponse:
      type: "object"
      required:
        - leaderboard
      properties:
        leaderboard:
          $ref: '#/components/schemas/Leaderboard'

    GetLeaderBoardByTimeTrialRequest:
      type: "object"
      required:
        - timeTrialID
      properties:
        timeTrialID:
          type: string
          format: uuid
      xml:
        name: "GetLeaderBoardByTimeTrialRequest"

    GetLeaderBoardByTimeTrialResponse:
      type: "object"
      required:
        - leaderboard
      properties:
        leaderboard:
          type: array
          items:
            $ref: "#/components/schemas/Leaderboard"
      xml:
        name: "GetLeaderBoardByTimeTrialResponse"